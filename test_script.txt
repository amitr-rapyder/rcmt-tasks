#!/bin/bash
set -e

output_file="/home/amitdemo/output.txt"

create_and_upload_file() {
    echo "Creating and uploading file..."
    
    # Login using managed identity
    az login --identity || {
        echo "Error logging in with managed identity"
        return 1
    }
    
    # Get storage account key
    storage_key=$(az storage account keys list \
        --resource-group "CoE" \
        --account-name "amitdemovm" \
        --query '[0].value' -o tsv) || {
        echo "Error getting storage account key"
        return 1
    }
    
    # Create and set content of the file
    current_date=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "Date and Time:\n$current_date" > "$output_file"
    
    # Set blob path variables for TODAY's date
    year=$(date '+%Y')
    month=$(date '+%m')
    day=$(date '+%d')
    blob_path="$year/$month/$day/output.txt"
    
    # Upload file
    az storage blob upload \
        --account-name "amitdemovm" \
        --account-key "$storage_key" \
        --container-name "amitdemovm" \
        --file "$output_file" \
        --name "$blob_path" \
        --overwrite || {
        echo "Error uploading file"
        return 1
    }
    echo "File uploaded successfully to: $blob_path"
    
    # Create temporary folder marker
    temp_file=$(mktemp)
    az storage blob upload \
        --account-name "amitdemovm" \
        --account-key "$storage_key" \
        --container-name "amitdemovm" \
        --file "$temp_file" \
        --name "folder02/.folder" \
        --overwrite
    rm "$temp_file"
    echo "Folder marker created successfully"
    
    return 0
}

test_previous_date_access() {
    echo "Testing future date file access..."
    
    # Login using managed identity
    az login --identity || {
        echo "Error logging in with managed identity"
        return 1
    }
    
    # Get storage account key
    storage_key=$(az storage account keys list \
        --resource-group "CoE" \
        --account-name "amitdemovm" \
        --query '[0].value' -o tsv) || {
        echo "Error getting storage account key"
        return 1
    }
    
    max_retries=5
    retry_count=0
    target_date="2025/01/01"  # Future date to check
    target_blob_path="$target_date/output.txt"
    
    echo "Attempting to access blob: $target_blob_path"
    
    while [ $retry_count -lt $max_retries ]; do
        ((retry_count++))
        echo "Attempt $retry_count of $max_retries"
        
        # Check SPECIFICALLY for the future date blob
        if az storage blob exists \
            --account-name "amitdemovm" \
            --account-key "$storage_key" \
            --container-name "amitdemovm" \
            --name "$target_blob_path" \
            --query "exists" \
            -o tsv | grep -q "true"; then
            
            # Double check the exact path
            blob_info=$(az storage blob show \
                --account-name "amitdemovm" \
                --account-key "$storage_key" \
                --container-name "amitdemovm" \
                --name "$target_blob_path" \
                --query "name" \
                -o tsv 2>/dev/null)
            
            if [ "$blob_info" = "$target_blob_path" ]; then
                echo "Successfully found blob at future date: $target_blob_path"
                return 0
            fi
        fi

        echo "Failed to access blob from target date: $target_date"
        
        # Create today's file
        if ! create_and_upload_file; then
            echo "Failed to create and upload new file"
            return 1
        fi
        
        echo "Created and uploaded new file for today's date"
        
        if [ $retry_count -eq $max_retries ]; then
            echo "Maximum retries ($max_retries) reached. Future date file not found as expected."
            return 1
        else
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
        fi
    done
    
    return 1
}

main() {
    echo "=== Starting Script ==="
    
    echo "Testing future date access..."
    if ! test_previous_date_access; then
        echo "Future date access test completed - file not found after $max_retries attempts (Expected behavior)"
        exit 0  # Changed to exit 0 since this is expected behavior
    fi
    
    echo "WARNING: Future date file was found unexpectedly!"
    exit 1  # Exit with error if we somehow found a file from the future
}

main